

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Nov 25 17:20:55 2022

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 2.05
    31                           ; Generated 20/12/2018 GMT
    32                           ; 
    33                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F877A Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  0008                     	;# 
    73  0009                     	;# 
    74  000A                     	;# 
    75  000B                     	;# 
    76  000C                     	;# 
    77  000D                     	;# 
    78  000E                     	;# 
    79  000E                     	;# 
    80  000F                     	;# 
    81  0010                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001D                     	;# 
    97  001E                     	;# 
    98  001F                     	;# 
    99  0081                     	;# 
   100  0085                     	;# 
   101  0086                     	;# 
   102  0087                     	;# 
   103  0088                     	;# 
   104  0089                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0098                     	;# 
   113  0099                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  000E                     	;# 
   140  000F                     	;# 
   141  0010                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0015                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001B                     	;# 
   155  001C                     	;# 
   156  001D                     	;# 
   157  001E                     	;# 
   158  001F                     	;# 
   159  0081                     	;# 
   160  0085                     	;# 
   161  0086                     	;# 
   162  0087                     	;# 
   163  0088                     	;# 
   164  0089                     	;# 
   165  008C                     	;# 
   166  008D                     	;# 
   167  008E                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0094                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009C                     	;# 
   175  009D                     	;# 
   176  009E                     	;# 
   177  009F                     	;# 
   178  010C                     	;# 
   179  010D                     	;# 
   180  010E                     	;# 
   181  010F                     	;# 
   182  018C                     	;# 
   183  018D                     	;# 
   184                           
   185                           	psect	idataBANK0
   186  0454                     __pidataBANK0:	
   187                           
   188                           ;initializer for _pwm_duty_cycle
   189  0454  3432               	retlw	50
   190  0455  3400               	retlw	0
   191                           
   192                           	psect	strings
   193  03A0                     __pstrings:	
   194  03A0                     stringtab:	
   195  03A0                     __stringtab:	
   196  03A0                     stringcode:	
   197                           ;	String table - string pointers are 1 byte each
   198                           
   199  03A0                     stringdir:	
   200  03A0  3003               	movlw	high stringdir
   201  03A1  008A               	movwf	10
   202  03A2  0804               	movf	4,w
   203  03A3  0A84               	incf	4,f
   204  03A4  0782               	addwf	2,f
   205  03A5                     __stringbase:	
   206  03A5  3400               	retlw	0
   207  03A6                     __end_of__stringtab:	
   208  03A6                     _dpowers:	
   209  03A6  3401               	retlw	1
   210  03A7  3400               	retlw	0
   211  03A8  340A               	retlw	10
   212  03A9  3400               	retlw	0
   213  03AA  3464               	retlw	100
   214  03AB  3400               	retlw	0
   215  03AC  34E8               	retlw	232
   216  03AD  3403               	retlw	3
   217  03AE  3410               	retlw	16
   218  03AF  3427               	retlw	39
   219  03B0                     __end_of_dpowers:	
   220  0008                     _PORTD	set	8
   221  0007                     _PORTC	set	7
   222  0001                     _TMR0	set	1
   223  0058                     _RBIF	set	88
   224  0035                     _RB5	set	53
   225  0034                     _RB4	set	52
   226  0039                     _RC1	set	57
   227  0038                     _RC0	set	56
   228  005D                     _T0IE	set	93
   229  005E                     _PEIE	set	94
   230  003B                     _RC3	set	59
   231  005A                     _T0IF	set	90
   232  005F                     _GIE	set	95
   233  0043                     _RD3	set	67
   234  0042                     _RD2	set	66
   235  0047                     _RD7	set	71
   236  0046                     _RD6	set	70
   237  0045                     _RD5	set	69
   238  0044                     _RD4	set	68
   239  0088                     _TRISD	set	136
   240  0087                     _TRISC	set	135
   241  0086                     _TRISBbits	set	134
   242  0408                     _PS0	set	1032
   243  0409                     _PS1	set	1033
   244  040A                     _PS2	set	1034
   245  040B                     _PSA	set	1035
   246  040D                     _T0CS	set	1037
   247  03B0                     STR_1:	
   248  03B0  3450               	retlw	80	;'P'
   249  03B1  3477               	retlw	119	;'w'
   250  03B2  346D               	retlw	109	;'m'
   251  03B3  3420               	retlw	32	;' '
   252  03B4  3444               	retlw	68	;'D'
   253  03B5  3475               	retlw	117	;'u'
   254  03B6  3474               	retlw	116	;'t'
   255  03B7  3479               	retlw	121	;'y'
   256  03B8  3420               	retlw	32	;' '
   257  03B9  3443               	retlw	67	;'C'
   258  03BA  3479               	retlw	121	;'y'
   259  03BB  3463               	retlw	99	;'c'
   260  03BC  346C               	retlw	108	;'l'
   261  03BD  3465               	retlw	101	;'e'
   262  03BE  343D               	retlw	61	;'='
   263  03BF  3420               	retlw	32	;' '
   264  03C0  3425               	retlw	37	;'%'
   265  03C1  3464               	retlw	100	;'d'
   266  03C2  3400               	retlw	0
   267  03C3                     STR_2:	
   268  03C3  3420               	retlw	32	;' '
   269  03C4  3420               	retlw	32	;' '
   270  03C5  3420               	retlw	32	;' '
   271  03C6  3420               	retlw	32	;' '
   272  03C7  3420               	retlw	32	;' '
   273  03C8  3420               	retlw	32	;' '
   274  03C9  3425               	retlw	37	;'%'
   275  03CA  342E               	retlw	46	;'.'
   276  03CB  3433               	retlw	51	;'3'
   277  03CC  3475               	retlw	117	;'u'
   278  03CD  3400               	retlw	0
   279                           
   280                           ; #config settings
   281  0000                     
   282                           	psect	cinit
   283  000F                     start_initialization:	
   284  000F                     __initialization:	
   285                           
   286                           ; Initialize objects allocated to BANK0
   287  000F  120A  118A  2454  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   288  0014  00DE               	movwf	__pdataBANK0& (0+127)
   289  0015  120A  118A  2455  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   290  001A  00DF               	movwf	(__pdataBANK0+1)& (0+127)
   291                           
   292                           ; Clear objects allocated to BANK0
   293  001B  1383               	bcf	3,7	;select IRP bank0
   294  001C  3020               	movlw	low __pbssBANK0
   295  001D  0084               	movwf	4
   296  001E  3048               	movlw	low (__pbssBANK0+40)
   297  001F  120A  118A  244C   	fcall	clear_ram0
   298                           
   299                           ; Clear objects allocated to COMMON
   300  0022  01F9               	clrf	__pbssCOMMON& (0+127)
   301  0023  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   302  0024                     end_of_initialization:	
   303                           ;End of C runtime variable initialization code
   304                           
   305  0024                     __end_of__initialization:	
   306  0024  0183               	clrf	3
   307  0025  120A  118A  297C   	ljmp	_main	;jump to C main() function
   308                           
   309                           	psect	bssCOMMON
   310  0079                     __pbssCOMMON:	
   311  0079                     _counter:	
   312  0079                     	ds	2
   313                           
   314                           	psect	bssBANK0
   315  0020                     __pbssBANK0:	
   316  0020                     _dizi:	
   317  0020                     	ds	40
   318                           
   319                           	psect	dataBANK0
   320  005E                     __pdataBANK0:	
   321  005E                     _pwm_duty_cycle:	
   322  005E                     	ds	2
   323                           
   324                           	psect	clrtext
   325  044C                     clear_ram0:	
   326                           ;	Called with FSR containing the base address, and
   327                           ;	W with the last address+1
   328                           
   329  044C  0064               	clrwdt	;clear the watchdog before getting into this loop
   330  044D                     clrloop0:	
   331  044D  0180               	clrf	0	;clear RAM location pointed to by FSR
   332  044E  0A84               	incf	4,f	;increment pointer
   333  044F  0604               	xorwf	4,w	;XOR with final address
   334  0450  1903               	btfsc	3,2	;have we reached the end yet?
   335  0451  3400               	retlw	0	;all done for this memory range, return
   336  0452  0604               	xorwf	4,w	;XOR again to restore value
   337  0453  2C4D               	goto	clrloop0	;do the next byte
   338                           
   339                           	psect	cstackCOMMON
   340  0070                     __pcstackCOMMON:	
   341  0070                     ?_isdigit:	
   342  0070                     ?_Lcd_Port:	
   343                           ; 1 bit 
   344                           
   345  0070                     ?_Lcd_Cmd:	
   346                           ; 1 bytes @ 0x0
   347                           
   348  0070                     ?_Lcd_Init:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0070                     ?_Lcd_Write_Char:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_Lcd_Write_String:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_TMR_Intt:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ??_TMR_Intt:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?_TMR0_Init:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 1 bytes @ 0x0
   368                           
   369                           
   370                           ; 1 bytes @ 0x0
   371  0070                     	ds	3
   372  0073                     ??_isdigit:	
   373  0073                     ??_Lcd_Port:	
   374                           ; 1 bytes @ 0x3
   375                           
   376  0073                     ??_TMR0_Init:	
   377                           ; 1 bytes @ 0x3
   378                           
   379  0073                     ?___bmul:	
   380                           ; 1 bytes @ 0x3
   381                           
   382  0073                     ?___lwdiv:	
   383                           ; 1 bytes @ 0x3
   384                           
   385  0073                     Lcd_Port@a:	
   386                           ; 2 bytes @ 0x3
   387                           
   388  0073                     ___bmul@multiplicand:	
   389                           ; 1 bytes @ 0x3
   390                           
   391  0073                     _isdigit$602:	
   392                           ; 1 bytes @ 0x3
   393                           
   394  0073                     ___lwdiv@divisor:	
   395                           ; 1 bytes @ 0x3
   396                           
   397                           
   398                           ; 2 bytes @ 0x3
   399  0073                     	ds	1
   400  0074                     ??_Lcd_Cmd:	
   401  0074                     ??_Lcd_Write_Char:	
   402                           ; 1 bytes @ 0x4
   403                           
   404  0074                     ??___bmul:	
   405                           ; 1 bytes @ 0x4
   406                           
   407  0074                     isdigit@c:	
   408                           ; 1 bytes @ 0x4
   409                           
   410                           
   411                           ; 1 bytes @ 0x4
   412  0074                     	ds	1
   413  0075                     Lcd_Cmd@a:	
   414  0075                     Lcd_Write_Char@temp:	
   415                           ; 1 bytes @ 0x5
   416                           
   417  0075                     ___bmul@product:	
   418                           ; 1 bytes @ 0x5
   419                           
   420  0075                     ___lwdiv@dividend:	
   421                           ; 1 bytes @ 0x5
   422                           
   423                           
   424                           ; 2 bytes @ 0x5
   425  0075                     	ds	1
   426  0076                     ?_Lcd_Set_Cursor:	
   427  0076                     ??_Lcd_Init:	
   428                           ; 1 bytes @ 0x6
   429                           
   430  0076                     Lcd_Set_Cursor@b:	
   431                           ; 1 bytes @ 0x6
   432                           
   433  0076                     Lcd_Write_Char@y:	
   434                           ; 1 bytes @ 0x6
   435                           
   436  0076                     ___bmul@multiplier:	
   437                           ; 1 bytes @ 0x6
   438                           
   439                           
   440                           ; 1 bytes @ 0x6
   441  0076                     	ds	1
   442  0077                     ??_Lcd_Set_Cursor:	
   443  0077                     ??___lwdiv:	
   444                           ; 1 bytes @ 0x7
   445                           
   446  0077                     Lcd_Write_Char@a:	
   447                           ; 1 bytes @ 0x7
   448                           
   449                           
   450                           ; 1 bytes @ 0x7
   451  0077                     	ds	1
   452  0078                     ??_Lcd_Write_String:	
   453  0078                     ??___lwmod:	
   454                           ; 1 bytes @ 0x8
   455                           
   456                           
   457                           ; 1 bytes @ 0x8
   458  0078                     	ds	1
   459                           
   460                           	psect	cstackBANK0
   461  0048                     __pcstackBANK0:	
   462  0048                     Lcd_Set_Cursor@a:	
   463  0048                     ___lwdiv@counter:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0048                     Lcd_Write_String@i:	
   467                           ; 1 bytes @ 0x0
   468                           
   469                           
   470                           ; 2 bytes @ 0x0
   471  0048                     	ds	1
   472  0049                     Lcd_Set_Cursor@z:	
   473  0049                     ___lwdiv@quotient:	
   474                           ; 1 bytes @ 0x1
   475                           
   476                           
   477                           ; 2 bytes @ 0x1
   478  0049                     	ds	1
   479  004A                     Lcd_Set_Cursor@y:	
   480  004A                     Lcd_Write_String@a:	
   481                           ; 1 bytes @ 0x2
   482                           
   483                           
   484                           ; 1 bytes @ 0x2
   485  004A                     	ds	1
   486  004B                     ?___lwmod:	
   487  004B                     Lcd_Set_Cursor@temp:	
   488                           ; 2 bytes @ 0x3
   489                           
   490  004B                     ___lwmod@divisor:	
   491                           ; 1 bytes @ 0x3
   492                           
   493                           
   494                           ; 2 bytes @ 0x3
   495  004B                     	ds	2
   496  004D                     ___lwmod@dividend:	
   497                           
   498                           ; 2 bytes @ 0x5
   499  004D                     	ds	2
   500  004F                     ___lwmod@counter:	
   501                           
   502                           ; 1 bytes @ 0x7
   503  004F                     	ds	1
   504  0050                     ?_sprintf:	
   505  0050                     sprintf@f:	
   506                           ; 2 bytes @ 0x8
   507                           
   508                           
   509                           ; 1 bytes @ 0x8
   510  0050                     	ds	3
   511  0053                     ??_sprintf:	
   512                           
   513                           ; 1 bytes @ 0xB
   514  0053                     	ds	3
   515  0056                     sprintf@ap:	
   516                           
   517                           ; 1 bytes @ 0xE
   518  0056                     	ds	1
   519  0057                     sprintf@flag:	
   520                           
   521                           ; 1 bytes @ 0xF
   522  0057                     	ds	1
   523  0058                     sprintf@sp:	
   524                           
   525                           ; 1 bytes @ 0x10
   526  0058                     	ds	1
   527  0059                     sprintf@val:	
   528                           
   529                           ; 2 bytes @ 0x11
   530  0059                     	ds	2
   531  005B                     sprintf@prec:	
   532                           
   533                           ; 1 bytes @ 0x13
   534  005B                     	ds	1
   535  005C                     sprintf@c:	
   536                           
   537                           ; 1 bytes @ 0x14
   538  005C                     	ds	1
   539  005D                     ??_main:	
   540                           
   541                           ; 1 bytes @ 0x15
   542  005D                     	ds	1
   543                           
   544                           	psect	maintext
   545  017C                     __pmaintext:	
   546 ;;
   547 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   548 ;;
   549 ;; *************** function _main *****************
   550 ;; Defined at:
   551 ;;		line 58 in file "main.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;		None
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : B00/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   565 ;;      Params:         0       0       0       0       0
   566 ;;      Locals:         0       0       0       0       0
   567 ;;      Temps:          0       1       0       0       0
   568 ;;      Totals:         0       1       0       0       0
   569 ;;Total ram usage:        1 bytes
   570 ;; Hardware stack levels required when called:    4
   571 ;; This function calls:
   572 ;;		_Lcd_Init
   573 ;;		_Lcd_Set_Cursor
   574 ;;		_Lcd_Write_String
   575 ;;		_TMR0_Init
   576 ;;		_sprintf
   577 ;; This function is called by:
   578 ;;		Startup code after reset
   579 ;; This function uses a non-reentrant model
   580 ;;
   581                           
   582                           
   583                           ;psect for function _main
   584  017C                     _main:	
   585                           
   586                           ;main.c: 59:  TRISBbits.TRISB4=1;
   587                           
   588                           ;incstack = 0
   589                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   590  017C  1683               	bsf	3,5	;RP0=1, select bank1
   591  017D  1303               	bcf	3,6	;RP1=0, select bank1
   592  017E  1606               	bsf	6,4	;volatile
   593                           
   594                           ;main.c: 60:  TRISBbits.TRISB5=1;
   595  017F  1686               	bsf	6,5	;volatile
   596                           
   597                           ;main.c: 61:  TRISC=0x00; TRISD=0;
   598  0180  0187               	clrf	7	;volatile
   599  0181  0188               	clrf	8	;volatile
   600                           
   601                           ;main.c: 62:  PORTC=0; PORTD=0;
   602  0182  1283               	bcf	3,5	;RP0=0, select bank0
   603  0183  1303               	bcf	3,6	;RP1=0, select bank0
   604  0184  0187               	clrf	7	;volatile
   605  0185  0188               	clrf	8	;volatile
   606                           
   607                           ;main.c: 63:  TMR0_Init();
   608  0186  120A  118A  2441  120A  118A  	fcall	_TMR0_Init
   609                           
   610                           ;main.c: 64:  TMR0=0;
   611  018B  1283               	bcf	3,5	;RP0=0, select bank0
   612  018C  1303               	bcf	3,6	;RP1=0, select bank0
   613  018D  0181               	clrf	1	;volatile
   614                           
   615                           ;main.c: 65:  Lcd_Init();
   616  018E  120A  118A  220F  120A  118A  	fcall	_Lcd_Init
   617  0193                     l1599:	
   618                           
   619                           ;main.c: 68:      RC0=1;
   620  0193  1283               	bcf	3,5	;RP0=0, select bank0
   621  0194  1303               	bcf	3,6	;RP1=0, select bank0
   622  0195  1407               	bsf	7,0	;volatile
   623                           
   624                           ;main.c: 69:      RC1=0;
   625  0196  1087               	bcf	7,1	;volatile
   626  0197                     l1617:	
   627                           ;main.c: 70:      while(RBIF){
   628                           
   629                           
   630                           ;main.c: 70:      while(RBIF){
   631  0197  1C0B               	btfss	11,0	;volatile
   632  0198  29D6               	goto	l1619
   633                           
   634                           ;main.c: 71:         if(RB4 && pwm_duty_cycle <100 ) pwm_duty_cycle++;
   635  0199  1283               	bcf	3,5	;RP0=0, select bank0
   636  019A  1303               	bcf	3,6	;RP1=0, select bank0
   637  019B  1E06               	btfss	6,4	;volatile
   638  019C  29B0               	goto	l1607
   639  019D  085F               	movf	_pwm_duty_cycle+1,w
   640  019E  3A80               	xorlw	128
   641  019F  00FF               	movwf	127
   642  01A0  3080               	movlw	128
   643  01A1  027F               	subwf	127,w
   644  01A2  1D03               	skipz
   645  01A3  29A6               	goto	u1315
   646  01A4  3064               	movlw	100
   647  01A5  025E               	subwf	_pwm_duty_cycle,w
   648  01A6                     u1315:	
   649  01A6  1803               	skipnc
   650  01A7  29B0               	goto	l1607
   651  01A8  3001               	movlw	1
   652  01A9  1283               	bcf	3,5	;RP0=0, select bank0
   653  01AA  1303               	bcf	3,6	;RP1=0, select bank0
   654  01AB  07DE               	addwf	_pwm_duty_cycle,f
   655  01AC  1803               	skipnc
   656  01AD  0ADF               	incf	_pwm_duty_cycle+1,f
   657  01AE  3000               	movlw	0
   658  01AF  07DF               	addwf	_pwm_duty_cycle+1,f
   659  01B0                     l1607:	
   660                           
   661                           ;main.c: 72:         if(RB5 && pwm_duty_cycle > 0 && pwm_duty_cycle<101) pwm_duty_cycle-
      +                          -;
   662  01B0  1283               	bcf	3,5	;RP0=0, select bank0
   663  01B1  1303               	bcf	3,6	;RP1=0, select bank0
   664  01B2  1E86               	btfss	6,5	;volatile
   665  01B3  29D4               	goto	l1615
   666  01B4  085F               	movf	_pwm_duty_cycle+1,w
   667  01B5  3A80               	xorlw	128
   668  01B6  00FF               	movwf	127
   669  01B7  3080               	movlw	128
   670  01B8  027F               	subwf	127,w
   671  01B9  1D03               	skipz
   672  01BA  29BD               	goto	u1335
   673  01BB  3001               	movlw	1
   674  01BC  025E               	subwf	_pwm_duty_cycle,w
   675  01BD                     u1335:	
   676  01BD  1C03               	skipc
   677  01BE  29D4               	goto	l1615
   678  01BF  1283               	bcf	3,5	;RP0=0, select bank0
   679  01C0  1303               	bcf	3,6	;RP1=0, select bank0
   680  01C1  085F               	movf	_pwm_duty_cycle+1,w
   681  01C2  3A80               	xorlw	128
   682  01C3  00FF               	movwf	127
   683  01C4  3080               	movlw	128
   684  01C5  027F               	subwf	127,w
   685  01C6  1D03               	skipz
   686  01C7  29CA               	goto	u1345
   687  01C8  3065               	movlw	101
   688  01C9  025E               	subwf	_pwm_duty_cycle,w
   689  01CA                     u1345:	
   690  01CA  1803               	skipnc
   691  01CB  29D4               	goto	l1615
   692  01CC  30FF               	movlw	255
   693  01CD  1283               	bcf	3,5	;RP0=0, select bank0
   694  01CE  1303               	bcf	3,6	;RP1=0, select bank0
   695  01CF  07DE               	addwf	_pwm_duty_cycle,f
   696  01D0  1803               	skipnc
   697  01D1  0ADF               	incf	_pwm_duty_cycle+1,f
   698  01D2  30FF               	movlw	255
   699  01D3  07DF               	addwf	_pwm_duty_cycle+1,f
   700  01D4                     l1615:	
   701                           
   702                           ;main.c: 73:         RBIF=0;
   703  01D4  100B               	bcf	11,0	;volatile
   704  01D5  2997               	goto	l1617
   705  01D6                     l1619:	
   706                           
   707                           ;main.c: 75:      Lcd_Set_Cursor(1,1);
   708  01D6  01F6               	clrf	Lcd_Set_Cursor@b
   709  01D7  0AF6               	incf	Lcd_Set_Cursor@b,f
   710  01D8  3001               	movlw	1
   711  01D9  120A  118A  2269  120A  118A  	fcall	_Lcd_Set_Cursor
   712                           
   713                           ;main.c: 76:      sprintf (dizi,"Pwm Duty Cycle= %d");
   714  01DE  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   715  01DF  1283               	bcf	3,5	;RP0=0, select bank0
   716  01E0  1303               	bcf	3,6	;RP1=0, select bank0
   717  01E1  00DD               	movwf	??_main
   718  01E2  085D               	movf	??_main,w
   719  01E3  00D0               	movwf	sprintf@f
   720  01E4  3020               	movlw	(low (_dizi| 0))& (0+255)
   721  01E5  120A  118A  2028  120A  118A  	fcall	_sprintf
   722                           
   723                           ;main.c: 77:      Lcd_Write_String(dizi);
   724  01EA  3020               	movlw	(low (_dizi| 0))& (0+255)
   725  01EB  120A  118A  23CE  120A  118A  	fcall	_Lcd_Write_String
   726                           
   727                           ;main.c: 78:      Lcd_Set_Cursor(2,1);
   728  01F0  01F6               	clrf	Lcd_Set_Cursor@b
   729  01F1  0AF6               	incf	Lcd_Set_Cursor@b,f
   730  01F2  3002               	movlw	2
   731  01F3  120A  118A  2269  120A  118A  	fcall	_Lcd_Set_Cursor
   732                           
   733                           ;main.c: 79:      sprintf (dizi,"      %.3u",pwm_duty_cycle);
   734  01F8  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   735  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   736  01FA  1303               	bcf	3,6	;RP1=0, select bank0
   737  01FB  00DD               	movwf	??_main
   738  01FC  085D               	movf	??_main,w
   739  01FD  00D0               	movwf	sprintf@f
   740  01FE  085F               	movf	_pwm_duty_cycle+1,w
   741  01FF  00D2               	movwf	?_sprintf+2
   742  0200  085E               	movf	_pwm_duty_cycle,w
   743  0201  00D1               	movwf	?_sprintf+1
   744  0202  3020               	movlw	(low (_dizi| 0))& (0+255)
   745  0203  120A  118A  2028  120A  118A  	fcall	_sprintf
   746                           
   747                           ;main.c: 80:      Lcd_Write_String(dizi);
   748  0208  3020               	movlw	(low (_dizi| 0))& (0+255)
   749  0209  120A  118A  23CE  120A  118A  	fcall	_Lcd_Write_String
   750  020E  2993               	goto	l1599
   751  020F                     __end_of_main:	
   752                           
   753                           	psect	text1
   754  0028                     __ptext1:	
   755 ;; *************** function _sprintf *****************
   756 ;; Defined at:
   757 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  sp              1    wreg     PTR unsigned char 
   760 ;;		 -> dizi(40), 
   761 ;;  f               1    8[BANK0 ] PTR const unsigned char 
   762 ;;		 -> STR_2(11), STR_1(19), 
   763 ;; Auto vars:     Size  Location     Type
   764 ;;  sp              1   16[BANK0 ] PTR unsigned char 
   765 ;;		 -> dizi(40), 
   766 ;;  tmpval          4    0        struct .
   767 ;;  val             2   17[BANK0 ] unsigned int 
   768 ;;  cp              2    0        PTR const unsigned char 
   769 ;;  len             2    0        unsigned int 
   770 ;;  c               1   20[BANK0 ] unsigned char 
   771 ;;  prec            1   19[BANK0 ] char 
   772 ;;  flag            1   15[BANK0 ] unsigned char 
   773 ;;  ap              1   14[BANK0 ] PTR void [1]
   774 ;;		 -> ?_sprintf(2), 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  2    8[BANK0 ] int 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   784 ;;      Params:         0       3       0       0       0
   785 ;;      Locals:         0       7       0       0       0
   786 ;;      Temps:          0       3       0       0       0
   787 ;;      Totals:         0      13       0       0       0
   788 ;;Total ram usage:       13 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    2
   791 ;; This function calls:
   792 ;;		___bmul
   793 ;;		___lwdiv
   794 ;;		___lwmod
   795 ;;		_isdigit
   796 ;; This function is called by:
   797 ;;		_main
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           
   802                           ;psect for function _sprintf
   803  0028                     _sprintf:	
   804                           
   805                           ;incstack = 0
   806                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   807                           ;sprintf@sp stored from wreg
   808  0028  1283               	bcf	3,5	;RP0=0, select bank0
   809  0029  1303               	bcf	3,6	;RP1=0, select bank0
   810  002A  00D8               	movwf	sprintf@sp
   811                           
   812                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 500: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources
      +                          \c90\common\doprnt.c: 501: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\
      +                          common\doprnt.c: 502:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\source
      +                          s\c90\common\doprnt.c: 507:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sour
      +                          ces\c90\common\doprnt.c: 516:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .05\pic\sources\c90\common\doprnt.c: 520:  unsigned char flag;
   813  002B  3051               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   814  002C  00D3               	movwf	??_sprintf
   815  002D  0853               	movf	??_sprintf,w
   816  002E  00D6               	movwf	sprintf@ap
   817  002F                     l1577:	
   818                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
   819                           
   820                           
   821                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 548:  while
      +                          ((c = *f++)) {
   822  002F  3001               	movlw	1
   823  0030  07D0               	addwf	sprintf@f,f
   824  0031  30FF               	movlw	-1
   825  0032  0750               	addwf	sprintf@f,w
   826  0033  0084               	movwf	4
   827  0034  120A  118A  23A0  120A  118A  	fcall	stringdir
   828  0039  00D3               	movwf	??_sprintf
   829  003A  0853               	movf	??_sprintf,w
   830  003B  00DC               	movwf	sprintf@c
   831  003C  085C               	movf	sprintf@c,w
   832  003D  1903               	btfsc	3,2
   833  003E  2977               	goto	l1579
   834                           
   835                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 550:   if(c
      +                           != '%')
   836  003F  3025               	movlw	37
   837  0040  065C               	xorwf	sprintf@c,w
   838  0041  1903               	btfsc	3,2
   839  0042  284F               	goto	l1505
   840                           
   841                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 552:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 553:    ((*sp+
      +                          + = (c)));
   842  0043  085C               	movf	sprintf@c,w
   843  0044  00D3               	movwf	??_sprintf
   844  0045  0858               	movf	sprintf@sp,w
   845  0046  0084               	movwf	4
   846  0047  0853               	movf	??_sprintf,w
   847  0048  1383               	bcf	3,7	;select IRP bank0
   848  0049  0080               	movwf	0
   849  004A  3001               	movlw	1
   850  004B  00D3               	movwf	??_sprintf
   851  004C  0853               	movf	??_sprintf,w
   852  004D  07D8               	addwf	sprintf@sp,f
   853                           
   854                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 554:    con
      +                          tinue;
   855  004E  282F               	goto	l1577
   856  004F                     l1505:	
   857                           
   858                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 560:   flag
      +                           = 0;
   859  004F  01D7               	clrf	sprintf@flag
   860                           
   861                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 623:   if(*
      +                          f == '.') {
   862  0050  0850               	movf	sprintf@f,w
   863  0051  0084               	movwf	4
   864  0052  120A  118A  23A0  120A  118A  	fcall	stringdir
   865  0057  3A2E               	xorlw	46
   866  0058  1D03               	skipz
   867  0059  288D               	goto	l1519
   868                           
   869                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 625:    f++
      +                          ;
   870  005A  3001               	movlw	1
   871  005B  00D3               	movwf	??_sprintf
   872  005C  0853               	movf	??_sprintf,w
   873  005D  07D0               	addwf	sprintf@f,f
   874                           
   875                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 639:    {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 640:     prec
      +                           = 0;
   876  005E  01DB               	clrf	sprintf@prec
   877  005F                     l1517:	
   878                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 641:     wh
      +                          ile(isdigit((unsigned)*f))
   879                           
   880                           
   881                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 641:     wh
      +                          ile(isdigit((unsigned)*f))
   882  005F  0850               	movf	sprintf@f,w
   883  0060  0084               	movwf	4
   884  0061  120A  118A  23A0  120A  118A  	fcall	stringdir
   885  0066  120A  118A  2433  120A  118A  	fcall	_isdigit
   886  006B  1C03               	btfss	3,0
   887  006C  2891               	goto	l1523
   888                           
   889                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 642:      p
      +                          rec = prec*10 + *f++ - '0';
   890  006D  1283               	bcf	3,5	;RP0=0, select bank0
   891  006E  1303               	bcf	3,6	;RP1=0, select bank0
   892  006F  0850               	movf	sprintf@f,w
   893  0070  0084               	movwf	4
   894  0071  120A  118A  23A0  120A  118A  	fcall	stringdir
   895  0076  00D3               	movwf	??_sprintf
   896  0077  300A               	movlw	10
   897  0078  00D4               	movwf	??_sprintf+1
   898  0079  0854               	movf	??_sprintf+1,w
   899  007A  00F3               	movwf	___bmul@multiplicand
   900  007B  085B               	movf	sprintf@prec,w
   901  007C  120A  118A  2422  120A  118A  	fcall	___bmul
   902  0081  1283               	bcf	3,5	;RP0=0, select bank0
   903  0082  1303               	bcf	3,6	;RP1=0, select bank0
   904  0083  0753               	addwf	??_sprintf,w
   905  0084  3ED0               	addlw	-48
   906  0085  00D5               	movwf	??_sprintf+2
   907  0086  0855               	movf	??_sprintf+2,w
   908  0087  00DB               	movwf	sprintf@prec
   909  0088  3001               	movlw	1
   910  0089  00D3               	movwf	??_sprintf
   911  008A  0853               	movf	??_sprintf,w
   912  008B  07D0               	addwf	sprintf@f,f
   913  008C  285F               	goto	l1517
   914  008D                     l1519:	
   915                           
   916                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 645:    pre
      +                          c = 0;
   917  008D  01DB               	clrf	sprintf@prec
   918  008E  2891               	goto	l1523
   919  008F                     l238:	
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 836:   case
      +                           'u':
   921                           
   922                           
   923                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 837:    fla
      +                          g |= 0x40;
   924  008F  1757               	bsf	sprintf@flag,6
   925                           
   926                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 838:    bre
      +                          ak;
   927  0090  28B3               	goto	l236
   928  0091                     l1523:	
   929  0091  3001               	movlw	1
   930  0092  1283               	bcf	3,5	;RP0=0, select bank0
   931  0093  1303               	bcf	3,6	;RP1=0, select bank0
   932  0094  07D0               	addwf	sprintf@f,f
   933  0095  30FF               	movlw	-1
   934  0096  0750               	addwf	sprintf@f,w
   935  0097  0084               	movwf	4
   936  0098  120A  118A  23A0  120A  118A  	fcall	stringdir
   937  009D  00DC               	movwf	sprintf@c
   938  009E  00D3               	movwf	??_sprintf
   939  009F  01D4               	clrf	??_sprintf+1
   940                           
   941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   942                           ; Switch size 1, requested type "simple"
   943                           ; Number of cases is 1, Range of values is 0 to 0
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte            4     3 (average)
   947                           ; direct_byte           11     8 (fixed)
   948                           ; jumptable            260     6 (fixed)
   949                           ;	Chosen strategy is simple_byte
   950  00A0  0854               	movf	??_sprintf+1,w
   951  00A1  3A00               	xorlw	0	; case 0
   952  00A2  1903               	skipnz
   953  00A3  28A5               	goto	l1659
   954  00A4  282F               	goto	l1577
   955  00A5                     l1659:	
   956                           
   957                           ; Switch size 1, requested type "simple"
   958                           ; Number of cases is 4, Range of values is 0 to 117
   959                           ; switch strategies available:
   960                           ; Name         Instructions Cycles
   961                           ; simple_byte           13     7 (average)
   962                           ; jumptable            260     6 (fixed)
   963                           ;	Chosen strategy is simple_byte
   964  00A5  0853               	movf	??_sprintf,w
   965  00A6  3A00               	xorlw	0	; case 0
   966  00A7  1903               	skipnz
   967  00A8  2977               	goto	l1579
   968  00A9  3A64               	xorlw	100	; case 100
   969  00AA  1903               	skipnz
   970  00AB  28B3               	goto	l236
   971  00AC  3A0D               	xorlw	13	; case 105
   972  00AD  1903               	skipnz
   973  00AE  28B3               	goto	l236
   974  00AF  3A1C               	xorlw	28	; case 117
   975  00B0  1903               	skipnz
   976  00B1  288F               	goto	l238
   977  00B2  282F               	goto	l1577
   978  00B3                     l236:	
   979                           
   980                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1270:   if(
      +                          (flag & 0x40) == 0x00)
   981  00B3  1B57               	btfsc	sprintf@flag,6
   982  00B4  28CD               	goto	l1535
   983                           
   984                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1272:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1278:     val
      +                           = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
   985  00B5  0856               	movf	sprintf@ap,w
   986  00B6  0084               	movwf	4
   987  00B7  1383               	bcf	3,7	;select IRP bank0
   988  00B8  0800               	movf	0,w
   989  00B9  00D9               	movwf	sprintf@val
   990  00BA  0A84               	incf	4,f
   991  00BB  0800               	movf	0,w
   992  00BC  00DA               	movwf	sprintf@val+1
   993  00BD  3002               	movlw	2
   994  00BE  00D3               	movwf	??_sprintf
   995  00BF  0853               	movf	??_sprintf,w
   996  00C0  07D6               	addwf	sprintf@ap,f
   997                           
   998                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1280:    if
      +                          ((int)val < 0) {
   999  00C1  1FDA               	btfss	sprintf@val+1,7
  1000  00C2  28D9               	goto	l1539
  1001                           
  1002                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1281:     f
      +                          lag |= 0x03;
  1003  00C3  3003               	movlw	3
  1004  00C4  00D3               	movwf	??_sprintf
  1005  00C5  0853               	movf	??_sprintf,w
  1006  00C6  04D7               	iorwf	sprintf@flag,f
  1007                           
  1008                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1282:     v
      +                          al = -val;
  1009  00C7  09D9               	comf	sprintf@val,f
  1010  00C8  09DA               	comf	sprintf@val+1,f
  1011  00C9  0AD9               	incf	sprintf@val,f
  1012  00CA  1903               	skipnz
  1013  00CB  0ADA               	incf	sprintf@val+1,f
  1014  00CC  28D9               	goto	l1539
  1015  00CD                     l1535:	
  1016                           
  1017                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1292:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1305:     val
      +                           = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1018  00CD  0856               	movf	sprintf@ap,w
  1019  00CE  0084               	movwf	4
  1020  00CF  1383               	bcf	3,7	;select IRP bank0
  1021  00D0  0800               	movf	0,w
  1022  00D1  00D9               	movwf	sprintf@val
  1023  00D2  0A84               	incf	4,f
  1024  00D3  0800               	movf	0,w
  1025  00D4  00DA               	movwf	sprintf@val+1
  1026  00D5  3002               	movlw	2
  1027  00D6  00D3               	movwf	??_sprintf
  1028  00D7  0853               	movf	??_sprintf,w
  1029  00D8  07D6               	addwf	sprintf@ap,f
  1030  00D9                     l1539:	
  1031                           
  1032                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1309:   if(
      +                          prec == 0 && val == 0)
  1033  00D9  085B               	movf	sprintf@prec,w
  1034  00DA  1D03               	btfss	3,2
  1035  00DB  28E4               	goto	l1545
  1036  00DC  0859               	movf	sprintf@val,w
  1037  00DD  045A               	iorwf	sprintf@val+1,w
  1038  00DE  1D03               	btfss	3,2
  1039  00DF  28E4               	goto	l1545
  1040                           
  1041                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1310:    pr
      +                          ec++;
  1042  00E0  3001               	movlw	1
  1043  00E1  00D3               	movwf	??_sprintf
  1044  00E2  0853               	movf	??_sprintf,w
  1045  00E3  07DB               	addwf	sprintf@prec,f
  1046  00E4                     l1545:	
  1047                           
  1048                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1324:    fo
      +                          r(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1049  00E4  01DC               	clrf	sprintf@c
  1050  00E5  0ADC               	incf	sprintf@c,f
  1051  00E6                     l1549:	
  1052                           
  1053                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1325:     i
      +                          f(val < dpowers[c])
  1054  00E6  085C               	movf	sprintf@c,w
  1055  00E7  00D3               	movwf	??_sprintf
  1056  00E8  0753               	addwf	??_sprintf,w
  1057  00E9  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1058  00EA  0084               	movwf	4
  1059  00EB  120A  118A  23A0  120A  118A  	fcall	stringdir
  1060  00F0  00D4               	movwf	??_sprintf+1
  1061  00F1  120A  118A  23A0  120A  118A  	fcall	stringdir
  1062  00F6  00D5               	movwf	??_sprintf+2
  1063  00F7  0855               	movf	??_sprintf+2,w
  1064  00F8  025A               	subwf	sprintf@val+1,w
  1065  00F9  1D03               	skipz
  1066  00FA  28FD               	goto	u1235
  1067  00FB  0854               	movf	??_sprintf+1,w
  1068  00FC  0259               	subwf	sprintf@val,w
  1069  00FD                     u1235:	
  1070  00FD  1C03               	btfss	3,0
  1071  00FE  2907               	goto	l1555
  1072  00FF  3001               	movlw	1
  1073  0100  00D3               	movwf	??_sprintf
  1074  0101  0853               	movf	??_sprintf,w
  1075  0102  07DC               	addwf	sprintf@c,f
  1076  0103  3005               	movlw	5
  1077  0104  065C               	xorwf	sprintf@c,w
  1078  0105  1D03               	btfss	3,2
  1079  0106  28E6               	goto	l1549
  1080  0107                     l1555:	
  1081                           
  1082                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1358:   if(
      +                          c < prec)
  1083  0107  085B               	movf	sprintf@prec,w
  1084  0108  00D3               	movwf	??_sprintf
  1085  0109  01D4               	clrf	??_sprintf+1
  1086  010A  1BD3               	btfsc	??_sprintf,7
  1087  010B  03D4               	decf	??_sprintf+1,f
  1088  010C  0854               	movf	??_sprintf+1,w
  1089  010D  3A80               	xorlw	128
  1090  010E  3C80               	sublw	128
  1091  010F  1D03               	skipz
  1092  0110  2913               	goto	u1255
  1093  0111  0853               	movf	??_sprintf,w
  1094  0112  025C               	subwf	sprintf@c,w
  1095  0113                     u1255:	
  1096  0113  1C03               	btfss	3,0
  1097  0114  292D               	goto	l1563
  1098  0115  1283               	bcf	3,5	;RP0=0, select bank0
  1099  0116  1303               	bcf	3,6	;RP1=0, select bank0
  1100  0117  085B               	movf	sprintf@prec,w
  1101  0118  00D3               	movwf	??_sprintf
  1102  0119  01D4               	clrf	??_sprintf+1
  1103  011A  1BD3               	btfsc	??_sprintf,7
  1104  011B  03D4               	decf	??_sprintf+1,f
  1105  011C  0854               	movf	??_sprintf+1,w
  1106  011D  3A80               	xorlw	128
  1107  011E  00D5               	movwf	??_sprintf+2
  1108  011F  3080               	movlw	128
  1109  0120  0255               	subwf	??_sprintf+2,w
  1110  0121  1D03               	skipz
  1111  0122  2925               	goto	u1265
  1112  0123  085C               	movf	sprintf@c,w
  1113  0124  0253               	subwf	??_sprintf,w
  1114  0125                     u1265:	
  1115  0125  1803               	skipnc
  1116  0126  292D               	goto	l1563
  1117                           
  1118                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1361:    pr
      +                          ec = c;
  1119  0127  1283               	bcf	3,5	;RP0=0, select bank0
  1120  0128  1303               	bcf	3,6	;RP1=0, select bank0
  1121  0129  085C               	movf	sprintf@c,w
  1122  012A  00D3               	movwf	??_sprintf
  1123  012B  0853               	movf	??_sprintf,w
  1124  012C  00DB               	movwf	sprintf@prec
  1125  012D                     l1563:	
  1126                           
  1127                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1441:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1457:    if(f
      +                          lag & 0x03)
  1128  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1129  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1130  012F  0857               	movf	sprintf@flag,w
  1131  0130  3903               	andlw	3
  1132  0131  1903               	btfsc	3,2
  1133  0132  293E               	goto	l1575
  1134                           
  1135                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1458:     (
      +                          (*sp++ = ('-')));
  1136  0133  302D               	movlw	45
  1137  0134                     L1:	
  1138  0134  00D3               	movwf	??_sprintf
  1139  0135  0858               	movf	sprintf@sp,w
  1140  0136  0084               	movwf	4
  1141  0137  0853               	movf	??_sprintf,w
  1142  0138  1383               	bcf	3,7	;select IRP bank0
  1143  0139  0080               	movwf	0
  1144  013A  3001               	movlw	1
  1145  013B  00D3               	movwf	??_sprintf
  1146  013C  0853               	movf	??_sprintf,w
  1147  013D  07D8               	addwf	sprintf@sp,f
  1148  013E                     l1575:	
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1493:   whi
      +                          le(prec--) {
  1151  013E  30FF               	movlw	255
  1152  013F  00D3               	movwf	??_sprintf
  1153  0140  0853               	movf	??_sprintf,w
  1154  0141  07DB               	addwf	sprintf@prec,f
  1155  0142  0A5B               	incf	sprintf@prec,w
  1156  0143  1903               	btfsc	3,2
  1157  0144  282F               	goto	l1577
  1158                           
  1159                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1497:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1508:     c 
      +                          = (val / dpowers[prec]) % 10 + '0';
  1160  0145  300A               	movlw	10
  1161  0146  00CB               	movwf	___lwmod@divisor
  1162  0147  3000               	movlw	0
  1163  0148  00CC               	movwf	___lwmod@divisor+1
  1164  0149  085B               	movf	sprintf@prec,w
  1165  014A  00D3               	movwf	??_sprintf
  1166  014B  0753               	addwf	??_sprintf,w
  1167  014C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1168  014D  0084               	movwf	4
  1169  014E  120A  118A  23A0  120A  118A  	fcall	stringdir
  1170  0153  00F3               	movwf	___lwdiv@divisor
  1171  0154  120A  118A  23A0  120A  118A  	fcall	stringdir
  1172  0159  00F4               	movwf	___lwdiv@divisor+1
  1173  015A  085A               	movf	sprintf@val+1,w
  1174  015B  00F6               	movwf	___lwdiv@dividend+1
  1175  015C  0859               	movf	sprintf@val,w
  1176  015D  00F5               	movwf	___lwdiv@dividend
  1177  015E  120A  118A  22B9  120A  118A  	fcall	___lwdiv
  1178  0163  0874               	movf	?___lwdiv+1,w
  1179  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1180  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1181  0166  00CE               	movwf	___lwmod@dividend+1
  1182  0167  0873               	movf	?___lwdiv,w
  1183  0168  00CD               	movwf	___lwmod@dividend
  1184  0169  120A  118A  236C  120A  118A  	fcall	___lwmod
  1185  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1186  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0170  084B               	movf	?___lwmod,w
  1188  0171  3E30               	addlw	48
  1189  0172  00D4               	movwf	??_sprintf+1
  1190  0173  0854               	movf	??_sprintf+1,w
  1191  0174  00DC               	movwf	sprintf@c
  1192                           
  1193                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1542:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1543:    ((*
      +                          sp++ = (c)));
  1194  0175  085C               	movf	sprintf@c,w
  1195  0176  2934               	goto	L1
  1196  0177                     l1579:	
  1197                           
  1198                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c: 1557:  *sp 
      +                          = 0;
  1199  0177  0858               	movf	sprintf@sp,w
  1200  0178  0084               	movwf	4
  1201  0179  1383               	bcf	3,7	;select IRP bank0
  1202  017A  0180               	clrf	0
  1203  017B  0008               	return
  1204  017C                     __end_of_sprintf:	
  1205                           
  1206                           	psect	text2
  1207  0433                     __ptext2:	
  1208 ;; *************** function _isdigit *****************
  1209 ;; Defined at:
  1210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\isdigit.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;  c               1    wreg     unsigned char 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  c               1    4[COMMON] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;		None               void
  1217 ;; Registers used:
  1218 ;;		wreg, status,2, status,0
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1224 ;;      Params:         0       0       0       0       0
  1225 ;;      Locals:         2       0       0       0       0
  1226 ;;      Temps:          0       0       0       0       0
  1227 ;;      Totals:         2       0       0       0       0
  1228 ;;Total ram usage:        2 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    1
  1231 ;; This function calls:
  1232 ;;		Nothing
  1233 ;; This function is called by:
  1234 ;;		_sprintf
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           
  1239                           ;psect for function _isdigit
  1240  0433                     _isdigit:	
  1241                           
  1242                           ;incstack = 0
  1243                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1244                           ;isdigit@c stored from wreg
  1245  0433  00F4               	movwf	isdigit@c
  1246  0434  01F3               	clrf	_isdigit$602
  1247  0435  303A               	movlw	58
  1248  0436  0274               	subwf	isdigit@c,w
  1249  0437  1803               	skipnc
  1250  0438  2C3F               	goto	l1157
  1251  0439  3030               	movlw	48
  1252  043A  0274               	subwf	isdigit@c,w
  1253  043B  1C03               	skipc
  1254  043C  2C3F               	goto	l1157
  1255  043D  01F3               	clrf	_isdigit$602
  1256  043E  0AF3               	incf	_isdigit$602,f
  1257  043F                     l1157:	
  1258  043F  0C73               	rrf	_isdigit$602,w
  1259  0440  0008               	return
  1260  0441                     __end_of_isdigit:	
  1261                           
  1262                           	psect	text3
  1263  036C                     __ptext3:	
  1264 ;; *************** function ___lwmod *****************
  1265 ;; Defined at:
  1266 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;  divisor         2    3[BANK0 ] unsigned int 
  1269 ;;  dividend        2    5[BANK0 ] unsigned int 
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;  counter         1    7[BANK0 ] unsigned char 
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  2    3[BANK0 ] unsigned int 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1281 ;;      Params:         0       4       0       0       0
  1282 ;;      Locals:         0       1       0       0       0
  1283 ;;      Temps:          1       0       0       0       0
  1284 ;;      Totals:         1       5       0       0       0
  1285 ;;Total ram usage:        6 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; Hardware stack levels required when called:    1
  1288 ;; This function calls:
  1289 ;;		Nothing
  1290 ;; This function is called by:
  1291 ;;		_sprintf
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           
  1296                           ;psect for function ___lwmod
  1297  036C                     ___lwmod:	
  1298                           
  1299                           ;incstack = 0
  1300                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1301  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1302  036D  1303               	bcf	3,6	;RP1=0, select bank0
  1303  036E  084B               	movf	___lwmod@divisor,w
  1304  036F  044C               	iorwf	___lwmod@divisor+1,w
  1305  0370  1903               	btfsc	3,2
  1306  0371  2B9B               	goto	l1493
  1307  0372  01CF               	clrf	___lwmod@counter
  1308  0373  0ACF               	incf	___lwmod@counter,f
  1309  0374                     l1483:	
  1310  0374  1BCC               	btfsc	___lwmod@divisor+1,7
  1311  0375  2B82               	goto	l1485
  1312  0376  3001               	movlw	1
  1313  0377                     u1115:	
  1314  0377  1003               	clrc
  1315  0378  0DCB               	rlf	___lwmod@divisor,f
  1316  0379  0DCC               	rlf	___lwmod@divisor+1,f
  1317  037A  3EFF               	addlw	-1
  1318  037B  1D03               	skipz
  1319  037C  2B77               	goto	u1115
  1320  037D  3001               	movlw	1
  1321  037E  00F8               	movwf	??___lwmod
  1322  037F  0878               	movf	??___lwmod,w
  1323  0380  07CF               	addwf	___lwmod@counter,f
  1324  0381  2B74               	goto	l1483
  1325  0382                     l1485:	
  1326  0382  084C               	movf	___lwmod@divisor+1,w
  1327  0383  024E               	subwf	___lwmod@dividend+1,w
  1328  0384  1D03               	skipz
  1329  0385  2B88               	goto	u1135
  1330  0386  084B               	movf	___lwmod@divisor,w
  1331  0387  024D               	subwf	___lwmod@dividend,w
  1332  0388                     u1135:	
  1333  0388  1C03               	skipc
  1334  0389  2B90               	goto	l1489
  1335  038A  084B               	movf	___lwmod@divisor,w
  1336  038B  02CD               	subwf	___lwmod@dividend,f
  1337  038C  084C               	movf	___lwmod@divisor+1,w
  1338  038D  1C03               	skipc
  1339  038E  03CE               	decf	___lwmod@dividend+1,f
  1340  038F  02CE               	subwf	___lwmod@dividend+1,f
  1341  0390                     l1489:	
  1342  0390  3001               	movlw	1
  1343  0391                     u1145:	
  1344  0391  1003               	clrc
  1345  0392  0CCC               	rrf	___lwmod@divisor+1,f
  1346  0393  0CCB               	rrf	___lwmod@divisor,f
  1347  0394  3EFF               	addlw	-1
  1348  0395  1D03               	skipz
  1349  0396  2B91               	goto	u1145
  1350  0397  3001               	movlw	1
  1351  0398  02CF               	subwf	___lwmod@counter,f
  1352  0399  1D03               	btfss	3,2
  1353  039A  2B82               	goto	l1485
  1354  039B                     l1493:	
  1355  039B  084E               	movf	___lwmod@dividend+1,w
  1356  039C  00CC               	movwf	?___lwmod+1
  1357  039D  084D               	movf	___lwmod@dividend,w
  1358  039E  00CB               	movwf	?___lwmod
  1359  039F  0008               	return
  1360  03A0                     __end_of___lwmod:	
  1361                           
  1362                           	psect	text4
  1363  02B9                     __ptext4:	
  1364 ;; *************** function ___lwdiv *****************
  1365 ;; Defined at:
  1366 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;  divisor         2    3[COMMON] unsigned int 
  1369 ;;  dividend        2    5[COMMON] unsigned int 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  quotient        2    1[BANK0 ] unsigned int 
  1372 ;;  counter         1    0[BANK0 ] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  2    3[COMMON] unsigned int 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1382 ;;      Params:         4       0       0       0       0
  1383 ;;      Locals:         0       3       0       0       0
  1384 ;;      Temps:          1       0       0       0       0
  1385 ;;      Totals:         5       3       0       0       0
  1386 ;;Total ram usage:        8 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    1
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_sprintf
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           
  1397                           ;psect for function ___lwdiv
  1398  02B9                     ___lwdiv:	
  1399                           
  1400                           ;incstack = 0
  1401                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1402  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1403  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1404  02BB  01C9               	clrf	___lwdiv@quotient
  1405  02BC  01CA               	clrf	___lwdiv@quotient+1
  1406  02BD  0873               	movf	___lwdiv@divisor,w
  1407  02BE  0474               	iorwf	___lwdiv@divisor+1,w
  1408  02BF  1903               	btfsc	3,2
  1409  02C0  2AF2               	goto	l1471
  1410  02C1  01C8               	clrf	___lwdiv@counter
  1411  02C2  0AC8               	incf	___lwdiv@counter,f
  1412  02C3                     l1459:	
  1413  02C3  1BF4               	btfsc	___lwdiv@divisor+1,7
  1414  02C4  2AD1               	goto	l1461
  1415  02C5  3001               	movlw	1
  1416  02C6                     u1045:	
  1417  02C6  1003               	clrc
  1418  02C7  0DF3               	rlf	___lwdiv@divisor,f
  1419  02C8  0DF4               	rlf	___lwdiv@divisor+1,f
  1420  02C9  3EFF               	addlw	-1
  1421  02CA  1D03               	skipz
  1422  02CB  2AC6               	goto	u1045
  1423  02CC  3001               	movlw	1
  1424  02CD  00F7               	movwf	??___lwdiv
  1425  02CE  0877               	movf	??___lwdiv,w
  1426  02CF  07C8               	addwf	___lwdiv@counter,f
  1427  02D0  2AC3               	goto	l1459
  1428  02D1                     l1461:	
  1429  02D1  3001               	movlw	1
  1430  02D2                     u1065:	
  1431  02D2  1003               	clrc
  1432  02D3  0DC9               	rlf	___lwdiv@quotient,f
  1433  02D4  0DCA               	rlf	___lwdiv@quotient+1,f
  1434  02D5  3EFF               	addlw	-1
  1435  02D6  1D03               	skipz
  1436  02D7  2AD2               	goto	u1065
  1437  02D8  0874               	movf	___lwdiv@divisor+1,w
  1438  02D9  0276               	subwf	___lwdiv@dividend+1,w
  1439  02DA  1D03               	skipz
  1440  02DB  2ADE               	goto	u1075
  1441  02DC  0873               	movf	___lwdiv@divisor,w
  1442  02DD  0275               	subwf	___lwdiv@dividend,w
  1443  02DE                     u1075:	
  1444  02DE  1C03               	skipc
  1445  02DF  2AE7               	goto	l1467
  1446  02E0  0873               	movf	___lwdiv@divisor,w
  1447  02E1  02F5               	subwf	___lwdiv@dividend,f
  1448  02E2  0874               	movf	___lwdiv@divisor+1,w
  1449  02E3  1C03               	skipc
  1450  02E4  03F6               	decf	___lwdiv@dividend+1,f
  1451  02E5  02F6               	subwf	___lwdiv@dividend+1,f
  1452  02E6  1449               	bsf	___lwdiv@quotient,0
  1453  02E7                     l1467:	
  1454  02E7  3001               	movlw	1
  1455  02E8                     u1085:	
  1456  02E8  1003               	clrc
  1457  02E9  0CF4               	rrf	___lwdiv@divisor+1,f
  1458  02EA  0CF3               	rrf	___lwdiv@divisor,f
  1459  02EB  3EFF               	addlw	-1
  1460  02EC  1D03               	skipz
  1461  02ED  2AE8               	goto	u1085
  1462  02EE  3001               	movlw	1
  1463  02EF  02C8               	subwf	___lwdiv@counter,f
  1464  02F0  1D03               	btfss	3,2
  1465  02F1  2AD1               	goto	l1461
  1466  02F2                     l1471:	
  1467  02F2  084A               	movf	___lwdiv@quotient+1,w
  1468  02F3  00F4               	movwf	?___lwdiv+1
  1469  02F4  0849               	movf	___lwdiv@quotient,w
  1470  02F5  00F3               	movwf	?___lwdiv
  1471  02F6  0008               	return
  1472  02F7                     __end_of___lwdiv:	
  1473                           
  1474                           	psect	text5
  1475  0422                     __ptext5:	
  1476 ;; *************** function ___bmul *****************
  1477 ;; Defined at:
  1478 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  multiplier      1    wreg     unsigned char 
  1481 ;;  multiplicand    1    3[COMMON] unsigned char 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  multiplier      1    6[COMMON] unsigned char 
  1484 ;;  product         1    5[COMMON] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  1    wreg      unsigned char 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1494 ;;      Params:         1       0       0       0       0
  1495 ;;      Locals:         2       0       0       0       0
  1496 ;;      Temps:          1       0       0       0       0
  1497 ;;      Totals:         4       0       0       0       0
  1498 ;;Total ram usage:        4 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; Hardware stack levels required when called:    1
  1501 ;; This function calls:
  1502 ;;		Nothing
  1503 ;; This function is called by:
  1504 ;;		_sprintf
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           
  1509                           ;psect for function ___bmul
  1510  0422                     ___bmul:	
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1514                           ;___bmul@multiplier stored from wreg
  1515  0422  00F6               	movwf	___bmul@multiplier
  1516  0423  01F5               	clrf	___bmul@product
  1517  0424                     l1163:	
  1518  0424  1C76               	btfss	___bmul@multiplier,0
  1519  0425  2C2A               	goto	l1167
  1520  0426  0873               	movf	___bmul@multiplicand,w
  1521  0427  00F4               	movwf	??___bmul
  1522  0428  0874               	movf	??___bmul,w
  1523  0429  07F5               	addwf	___bmul@product,f
  1524  042A                     l1167:	
  1525  042A  1003               	clrc
  1526  042B  0DF3               	rlf	___bmul@multiplicand,f
  1527  042C  1003               	clrc
  1528  042D  0CF6               	rrf	___bmul@multiplier,f
  1529  042E  0876               	movf	___bmul@multiplier,w
  1530  042F  1D03               	btfss	3,2
  1531  0430  2C24               	goto	l1163
  1532  0431  0875               	movf	___bmul@product,w
  1533  0432  0008               	return
  1534  0433                     __end_of___bmul:	
  1535                           
  1536                           	psect	text6
  1537  0441                     __ptext6:	
  1538 ;; *************** function _TMR0_Init *****************
  1539 ;; Defined at:
  1540 ;;		line 51 in file "main.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		None
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1554 ;;      Params:         0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0
  1557 ;;      Totals:         0       0       0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    1
  1561 ;; This function calls:
  1562 ;;		Nothing
  1563 ;; This function is called by:
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           
  1569                           ;psect for function _TMR0_Init
  1570  0441                     _TMR0_Init:	
  1571                           
  1572                           ;main.c: 52:  GIE = 1; PEIE= 1; T0IE = 1;
  1573                           
  1574                           ;incstack = 0
  1575                           ; Regs used in _TMR0_Init: []
  1576  0441  178B               	bsf	11,7	;volatile
  1577  0442  170B               	bsf	11,6	;volatile
  1578  0443  168B               	bsf	11,5	;volatile
  1579                           
  1580                           ;main.c: 53:  T0CS=0; PSA=0;
  1581  0444  1683               	bsf	3,5	;RP0=1, select bank1
  1582  0445  1303               	bcf	3,6	;RP1=0, select bank1
  1583  0446  1281               	bcf	1,5	;volatile
  1584  0447  1181               	bcf	1,3	;volatile
  1585                           
  1586                           ;main.c: 54:  PS2=0; PS1=1; PS0=1;
  1587  0448  1101               	bcf	1,2	;volatile
  1588  0449  1481               	bsf	1,1	;volatile
  1589  044A  1401               	bsf	1,0	;volatile
  1590  044B  0008               	return
  1591  044C                     __end_of_TMR0_Init:	
  1592                           
  1593                           	psect	text7
  1594  03CE                     __ptext7:	
  1595 ;; *************** function _Lcd_Write_String *****************
  1596 ;; Defined at:
  1597 ;;		line 97 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  a               1    wreg     PTR unsigned char 
  1600 ;;		 -> dizi(40), 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  a               1    2[BANK0 ] PTR unsigned char 
  1603 ;;		 -> dizi(40), 
  1604 ;;  i               2    0[BANK0 ] int 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1614 ;;      Params:         0       0       0       0       0
  1615 ;;      Locals:         0       3       0       0       0
  1616 ;;      Temps:          1       0       0       0       0
  1617 ;;      Totals:         1       3       0       0       0
  1618 ;;Total ram usage:        4 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    3
  1621 ;; This function calls:
  1622 ;;		_Lcd_Write_Char
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           
  1629                           ;psect for function _Lcd_Write_String
  1630  03CE                     _Lcd_Write_String:	
  1631                           
  1632                           ;incstack = 0
  1633                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1634                           ;Lcd_Write_String@a stored from wreg
  1635  03CE  1283               	bcf	3,5	;RP0=0, select bank0
  1636  03CF  1303               	bcf	3,6	;RP1=0, select bank0
  1637  03D0  00CA               	movwf	Lcd_Write_String@a
  1638                           
  1639                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 97: void Lcd_Write_String
      +                          (char *a);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 98: {;C:\Program
      +                           Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 99:  int i;;C:\Program Files (x86)\M
      +                          icrochip\xc8\v2.05\pic\include\LCD.h: 100:  for(i=0;a[i]!='\0';i++)
  1640  03D1  01C8               	clrf	Lcd_Write_String@i
  1641  03D2  01C9               	clrf	Lcd_Write_String@i+1
  1642  03D3                     l1259:	
  1643  03D3  0848               	movf	Lcd_Write_String@i,w
  1644  03D4  074A               	addwf	Lcd_Write_String@a,w
  1645  03D5  00F8               	movwf	??_Lcd_Write_String
  1646  03D6  0878               	movf	??_Lcd_Write_String,w
  1647  03D7  0084               	movwf	4
  1648  03D8  1383               	bcf	3,7	;select IRP bank0
  1649  03D9  0800               	movf	0,w
  1650  03DA  1903               	btfsc	3,2
  1651  03DB  0008               	return
  1652                           
  1653                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 101:     Lcd_Write_Char(a
      +                          [i]);
  1654  03DC  0848               	movf	Lcd_Write_String@i,w
  1655  03DD  074A               	addwf	Lcd_Write_String@a,w
  1656  03DE  00F8               	movwf	??_Lcd_Write_String
  1657  03DF  0878               	movf	??_Lcd_Write_String,w
  1658  03E0  0084               	movwf	4
  1659  03E1  0800               	movf	0,w
  1660  03E2  120A  118A  2335  120A  118A  	fcall	_Lcd_Write_Char
  1661  03E7  3001               	movlw	1
  1662  03E8  1283               	bcf	3,5	;RP0=0, select bank0
  1663  03E9  1303               	bcf	3,6	;RP1=0, select bank0
  1664  03EA  07C8               	addwf	Lcd_Write_String@i,f
  1665  03EB  1803               	skipnc
  1666  03EC  0AC9               	incf	Lcd_Write_String@i+1,f
  1667  03ED  3000               	movlw	0
  1668  03EE  07C9               	addwf	Lcd_Write_String@i+1,f
  1669  03EF  2BD3               	goto	l1259
  1670  03F0                     __end_of_Lcd_Write_String:	
  1671                           
  1672                           	psect	text8
  1673  0335                     __ptext8:	
  1674 ;; *************** function _Lcd_Write_Char *****************
  1675 ;; Defined at:
  1676 ;;		line 81 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  a               1    wreg     unsigned char 
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  a               1    7[COMMON] unsigned char 
  1681 ;;  y               1    6[COMMON] unsigned char 
  1682 ;;  temp            1    5[COMMON] unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, pclath, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1692 ;;      Params:         0       0       0       0       0
  1693 ;;      Locals:         3       0       0       0       0
  1694 ;;      Temps:          1       0       0       0       0
  1695 ;;      Totals:         4       0       0       0       0
  1696 ;;Total ram usage:        4 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    2
  1699 ;; This function calls:
  1700 ;;		_Lcd_Port
  1701 ;; This function is called by:
  1702 ;;		_Lcd_Write_String
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           
  1707                           ;psect for function _Lcd_Write_Char
  1708  0335                     _Lcd_Write_Char:	
  1709                           
  1710                           ;incstack = 0
  1711                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1712                           ;Lcd_Write_Char@a stored from wreg
  1713  0335  00F7               	movwf	Lcd_Write_Char@a
  1714                           
  1715                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 81: void Lcd_Write_Char(c
      +                          har a);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 82: {;C:\Program Fi
      +                          les (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 83:    char temp,y;;C:\Program Files (x
      +                          86)\Microchip\xc8\v2.05\pic\include\LCD.h: 84:    temp = a&0x0F;
  1716  0336  0877               	movf	Lcd_Write_Char@a,w
  1717  0337  390F               	andlw	15
  1718  0338  00F4               	movwf	??_Lcd_Write_Char
  1719  0339  0874               	movf	??_Lcd_Write_Char,w
  1720  033A  00F5               	movwf	Lcd_Write_Char@temp
  1721                           
  1722                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 85:    y = a&0xF0;
  1723  033B  0877               	movf	Lcd_Write_Char@a,w
  1724  033C  39F0               	andlw	240
  1725  033D  00F4               	movwf	??_Lcd_Write_Char
  1726  033E  0874               	movf	??_Lcd_Write_Char,w
  1727  033F  00F6               	movwf	Lcd_Write_Char@y
  1728                           
  1729                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 86:    RD2 = 1;
  1730  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1731  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1732  0342  1508               	bsf	8,2	;volatile
  1733                           
  1734                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 87:    Lcd_Port(y>>4);
  1735  0343  0876               	movf	Lcd_Write_Char@y,w
  1736  0344  00F4               	movwf	??_Lcd_Write_Char
  1737  0345  3004               	movlw	4
  1738  0346                     u565:	
  1739  0346  1003               	clrc
  1740  0347  0CF4               	rrf	??_Lcd_Write_Char,f
  1741  0348  3EFF               	addlw	-1
  1742  0349  1D03               	skipz
  1743  034A  2B46               	goto	u565
  1744  034B  0874               	movf	??_Lcd_Write_Char,w
  1745  034C  120A  118A  23F0  120A  118A  	fcall	_Lcd_Port
  1746                           
  1747                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 88:    RD3 = 1;
  1748  0351  1283               	bcf	3,5	;RP0=0, select bank0
  1749  0352  1303               	bcf	3,6	;RP1=0, select bank0
  1750  0353  1588               	bsf	8,3	;volatile
  1751                           
  1752                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 89:    _delay((unsigned l
      +                          ong)((40)*(800000/4000000.0)));
  1753  0354  2B55               	nop2	;2 cycle nop
  1754  0355  2B56               	nop2	;2 cycle nop
  1755  0356  2B57               	nop2	;2 cycle nop
  1756  0357  2B58               	nop2	;2 cycle nop
  1757                           
  1758                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 90:    RD3 = 0;
  1759  0358  1283               	bcf	3,5	;RP0=0, select bank0
  1760  0359  1303               	bcf	3,6	;RP1=0, select bank0
  1761  035A  1188               	bcf	8,3	;volatile
  1762                           
  1763                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 91:    Lcd_Port(temp);
  1764  035B  0875               	movf	Lcd_Write_Char@temp,w
  1765  035C  120A  118A  23F0  120A  118A  	fcall	_Lcd_Port
  1766                           
  1767                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 92:    RD3 = 1;
  1768  0361  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0362  1303               	bcf	3,6	;RP1=0, select bank0
  1770  0363  1588               	bsf	8,3	;volatile
  1771                           
  1772                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 93:    _delay((unsigned l
      +                          ong)((40)*(800000/4000000.0)));
  1773  0364  2B65               	nop2	;2 cycle nop
  1774  0365  2B66               	nop2	;2 cycle nop
  1775  0366  2B67               	nop2	;2 cycle nop
  1776  0367  2B68               	nop2	;2 cycle nop
  1777                           
  1778                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 94:    RD3 = 0;
  1779  0368  1283               	bcf	3,5	;RP0=0, select bank0
  1780  0369  1303               	bcf	3,6	;RP1=0, select bank0
  1781  036A  1188               	bcf	8,3	;volatile
  1782  036B  0008               	return
  1783  036C                     __end_of_Lcd_Write_Char:	
  1784                           
  1785                           	psect	text9
  1786  0269                     __ptext9:	
  1787 ;; *************** function _Lcd_Set_Cursor *****************
  1788 ;; Defined at:
  1789 ;;		line 41 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  a               1    wreg     unsigned char 
  1792 ;;  b               1    6[COMMON] unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  a               1    0[BANK0 ] unsigned char 
  1795 ;;  temp            1    3[BANK0 ] unsigned char 
  1796 ;;  y               1    2[BANK0 ] unsigned char 
  1797 ;;  z               1    1[BANK0 ] unsigned char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		wreg, status,2, status,0, pclath, cstack
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1807 ;;      Params:         1       0       0       0       0
  1808 ;;      Locals:         0       4       0       0       0
  1809 ;;      Temps:          2       0       0       0       0
  1810 ;;      Totals:         3       4       0       0       0
  1811 ;;Total ram usage:        7 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    3
  1814 ;; This function calls:
  1815 ;;		_Lcd_Cmd
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           
  1822                           ;psect for function _Lcd_Set_Cursor
  1823  0269                     _Lcd_Set_Cursor:	
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1827                           ;Lcd_Set_Cursor@a stored from wreg
  1828  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1829  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1830  026B  00C8               	movwf	Lcd_Set_Cursor@a
  1831                           
  1832                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 41: void Lcd_Set_Cursor(c
      +                          har a, char b);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 42: {;C:\Pr
      +                          ogram Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 43:  char temp,z,y;;C:\Program 
      +                          Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 44:  if(a == 1)
  1833  026C  0348               	decf	Lcd_Set_Cursor@a,w
  1834  026D  1D03               	btfss	3,2
  1835  026E  2A92               	goto	l1233
  1836                           
  1837                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 45:  {;C:\Program Files (
      +                          x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 46:    temp = 0x80 + b - 1;
  1838  026F  0876               	movf	Lcd_Set_Cursor@b,w
  1839  0270  3E7F               	addlw	127
  1840  0271  00F7               	movwf	??_Lcd_Set_Cursor
  1841  0272  0877               	movf	??_Lcd_Set_Cursor,w
  1842  0273  00CB               	movwf	Lcd_Set_Cursor@temp
  1843                           
  1844                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 47:   z = temp>>4;
  1845  0274  084B               	movf	Lcd_Set_Cursor@temp,w
  1846  0275  00F7               	movwf	??_Lcd_Set_Cursor
  1847  0276  3004               	movlw	4
  1848  0277                     u755:	
  1849  0277  1003               	clrc
  1850  0278  0CF7               	rrf	??_Lcd_Set_Cursor,f
  1851  0279  3EFF               	addlw	-1
  1852  027A  1D03               	skipz
  1853  027B  2A77               	goto	u755
  1854  027C  0877               	movf	??_Lcd_Set_Cursor,w
  1855  027D  00F8               	movwf	??_Lcd_Set_Cursor+1
  1856  027E  0878               	movf	??_Lcd_Set_Cursor+1,w
  1857  027F  00C9               	movwf	Lcd_Set_Cursor@z
  1858                           
  1859                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 48:   y = temp & 0x0F;
  1860  0280  084B               	movf	Lcd_Set_Cursor@temp,w
  1861  0281  390F               	andlw	15
  1862  0282  00F7               	movwf	??_Lcd_Set_Cursor
  1863  0283  0877               	movf	??_Lcd_Set_Cursor,w
  1864  0284  00CA               	movwf	Lcd_Set_Cursor@y
  1865                           
  1866                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 49:   Lcd_Cmd(z);
  1867  0285  0849               	movf	Lcd_Set_Cursor@z,w
  1868  0286  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  1869                           
  1870                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 50:   Lcd_Cmd(y);
  1871  028B  1283               	bcf	3,5	;RP0=0, select bank0
  1872  028C  1303               	bcf	3,6	;RP1=0, select bank0
  1873  028D  084A               	movf	Lcd_Set_Cursor@y,w
  1874  028E  120A  118A  240A   	fcall	_Lcd_Cmd
  1875                           
  1876                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 51:  }
  1877  0291  0008               	return
  1878  0292                     l1233:	
  1879  0292  3002               	movlw	2
  1880  0293  0648               	xorwf	Lcd_Set_Cursor@a,w
  1881  0294  1D03               	btfss	3,2
  1882  0295  0008               	return
  1883                           
  1884                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 53:  {;C:\Program Files (
      +                          x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 54:   temp = 0xC0 + b - 1;
  1885  0296  0876               	movf	Lcd_Set_Cursor@b,w
  1886  0297  3EBF               	addlw	191
  1887  0298  00F7               	movwf	??_Lcd_Set_Cursor
  1888  0299  0877               	movf	??_Lcd_Set_Cursor,w
  1889  029A  00CB               	movwf	Lcd_Set_Cursor@temp
  1890                           
  1891                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 55:   z = temp>>4;
  1892  029B  084B               	movf	Lcd_Set_Cursor@temp,w
  1893  029C  00F7               	movwf	??_Lcd_Set_Cursor
  1894  029D  3004               	movlw	4
  1895  029E                     u775:	
  1896  029E  1003               	clrc
  1897  029F  0CF7               	rrf	??_Lcd_Set_Cursor,f
  1898  02A0  3EFF               	addlw	-1
  1899  02A1  1D03               	skipz
  1900  02A2  2A9E               	goto	u775
  1901  02A3  0877               	movf	??_Lcd_Set_Cursor,w
  1902  02A4  00F8               	movwf	??_Lcd_Set_Cursor+1
  1903  02A5  0878               	movf	??_Lcd_Set_Cursor+1,w
  1904  02A6  00C9               	movwf	Lcd_Set_Cursor@z
  1905                           
  1906                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 56:   y = temp & 0x0F;
  1907  02A7  084B               	movf	Lcd_Set_Cursor@temp,w
  1908  02A8  390F               	andlw	15
  1909  02A9  00F7               	movwf	??_Lcd_Set_Cursor
  1910  02AA  0877               	movf	??_Lcd_Set_Cursor,w
  1911  02AB  00CA               	movwf	Lcd_Set_Cursor@y
  1912                           
  1913                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 57:   Lcd_Cmd(z);
  1914  02AC  0849               	movf	Lcd_Set_Cursor@z,w
  1915  02AD  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  1916                           
  1917                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 58:   Lcd_Cmd(y);
  1918  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1919  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1920  02B4  084A               	movf	Lcd_Set_Cursor@y,w
  1921  02B5  120A  118A  240A   	fcall	_Lcd_Cmd
  1922  02B8  0008               	return
  1923  02B9                     __end_of_Lcd_Set_Cursor:	
  1924                           
  1925                           	psect	text10
  1926  020F                     __ptext10:	
  1927 ;; *************** function _Lcd_Init *****************
  1928 ;; Defined at:
  1929 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  1    wreg      void 
  1936 ;; Registers used:
  1937 ;;		wreg, status,2, status,0, pclath, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1943 ;;      Params:         0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0
  1945 ;;      Temps:          2       0       0       0       0
  1946 ;;      Totals:         2       0       0       0       0
  1947 ;;Total ram usage:        2 bytes
  1948 ;; Hardware stack levels used:    1
  1949 ;; Hardware stack levels required when called:    3
  1950 ;; This function calls:
  1951 ;;		_Lcd_Cmd
  1952 ;;		_Lcd_Port
  1953 ;; This function is called by:
  1954 ;;		_main
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           
  1959                           ;psect for function _Lcd_Init
  1960  020F                     _Lcd_Init:	
  1961                           
  1962                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 64:   Lcd_Port(0x00);
  1963                           
  1964                           ;incstack = 0
  1965                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1966  020F  3000               	movlw	0
  1967  0210  120A  118A  23F0  120A  118A  	fcall	_Lcd_Port
  1968                           
  1969                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 65:    _delay((unsigned l
      +                          ong)((20)*(800000/4000.0)));
  1970  0215  3006               	movlw	6
  1971  0216  00F7               	movwf	??_Lcd_Init+1
  1972  0217  3030               	movlw	48
  1973  0218  00F6               	movwf	??_Lcd_Init
  1974  0219                     u1367:	
  1975  0219  0BF6               	decfsz	??_Lcd_Init,f
  1976  021A  2A19               	goto	u1367
  1977  021B  0BF7               	decfsz	??_Lcd_Init+1,f
  1978  021C  2A19               	goto	u1367
  1979  021D  0000               	nop
  1980                           
  1981                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 66:   Lcd_Cmd(0x03);
  1982  021E  3003               	movlw	3
  1983  021F  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  1984                           
  1985                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 67:  _delay((unsigned lon
      +                          g)((5)*(800000/4000.0)));
  1986  0224  30C7               	movlw	199
  1987  0225  00F6               	movwf	??_Lcd_Init
  1988  0226                     u1377:	
  1989  0226  2A27               	nop2
  1990  0227  0BF6               	decfsz	??_Lcd_Init,f
  1991  0228  2A26               	goto	u1377
  1992  0229  2A2A               	nop2
  1993  022A  2A2B               	nop2
  1994                           
  1995                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 68:   Lcd_Cmd(0x03);
  1996  022B  3003               	movlw	3
  1997  022C  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  1998                           
  1999                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 69:  _delay((unsigned lon
      +                          g)((11)*(800000/4000.0)));
  2000  0231  3003               	movlw	3
  2001  0232  00F7               	movwf	??_Lcd_Init+1
  2002  0233  30DA               	movlw	218
  2003  0234  00F6               	movwf	??_Lcd_Init
  2004  0235                     u1387:	
  2005  0235  0BF6               	decfsz	??_Lcd_Init,f
  2006  0236  2A35               	goto	u1387
  2007  0237  0BF7               	decfsz	??_Lcd_Init+1,f
  2008  0238  2A35               	goto	u1387
  2009  0239  0000               	nop
  2010                           
  2011                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 70:   Lcd_Cmd(0x03);
  2012  023A  3003               	movlw	3
  2013  023B  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2014                           
  2015                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 72:   Lcd_Cmd(0x02);
  2016  0240  3002               	movlw	2
  2017  0241  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2018                           
  2019                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 73:   Lcd_Cmd(0x02);
  2020  0246  3002               	movlw	2
  2021  0247  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2022                           
  2023                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 74:   Lcd_Cmd(0x08);
  2024  024C  3008               	movlw	8
  2025  024D  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2026                           
  2027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 75:   Lcd_Cmd(0x00);
  2028  0252  3000               	movlw	0
  2029  0253  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2030                           
  2031                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 76:   Lcd_Cmd(0x0C);
  2032  0258  300C               	movlw	12
  2033  0259  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2034                           
  2035                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 77:   Lcd_Cmd(0x00);
  2036  025E  3000               	movlw	0
  2037  025F  120A  118A  240A  120A  118A  	fcall	_Lcd_Cmd
  2038                           
  2039                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 78:   Lcd_Cmd(0x06);
  2040  0264  3006               	movlw	6
  2041  0265  120A  118A  240A   	fcall	_Lcd_Cmd
  2042  0268  0008               	return
  2043  0269                     __end_of_Lcd_Init:	
  2044                           
  2045                           	psect	text11
  2046  040A                     __ptext11:	
  2047 ;; *************** function _Lcd_Cmd *****************
  2048 ;; Defined at:
  2049 ;;		line 26 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  a               1    wreg     unsigned char 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  a               1    5[COMMON] unsigned char 
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  1    wreg      void 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, pclath, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2063 ;;      Params:         0       0       0       0       0
  2064 ;;      Locals:         1       0       0       0       0
  2065 ;;      Temps:          1       0       0       0       0
  2066 ;;      Totals:         2       0       0       0       0
  2067 ;;Total ram usage:        2 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    2
  2070 ;; This function calls:
  2071 ;;		_Lcd_Port
  2072 ;; This function is called by:
  2073 ;;		_Lcd_Set_Cursor
  2074 ;;		_Lcd_Init
  2075 ;;		_Lcd_Clear
  2076 ;;		_Lcd_Shift_Right
  2077 ;;		_Lcd_Shift_Left
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           
  2082                           ;psect for function _Lcd_Cmd
  2083  040A                     _Lcd_Cmd:	
  2084                           
  2085                           ;incstack = 0
  2086                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2087                           ;Lcd_Cmd@a stored from wreg
  2088  040A  00F5               	movwf	Lcd_Cmd@a
  2089                           
  2090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 26: void Lcd_Cmd(char a);
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 27: {;C:\Program Files (x8
      +                          6)\Microchip\xc8\v2.05\pic\include\LCD.h: 28:  RD2 = 0;
  2091  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2092  040C  1303               	bcf	3,6	;RP1=0, select bank0
  2093  040D  1108               	bcf	8,2	;volatile
  2094                           
  2095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 29:  Lcd_Port(a);
  2096  040E  0875               	movf	Lcd_Cmd@a,w
  2097  040F  120A  118A  23F0  120A  118A  	fcall	_Lcd_Port
  2098                           
  2099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 30:  RD3 = 1;
  2100  0414  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0415  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0416  1588               	bsf	8,3	;volatile
  2103                           
  2104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 31:         _delay((unsig
      +                          ned long)((4)*(800000/4000.0)));
  2105  0417  309F               	movlw	159
  2106  0418  00F4               	movwf	??_Lcd_Cmd
  2107  0419                     u1397:	
  2108  0419  2C1A               	nop2
  2109  041A  0BF4               	decfsz	??_Lcd_Cmd,f
  2110  041B  2C19               	goto	u1397
  2111  041C  2C1D               	nop2
  2112  041D  2C1E               	nop2
  2113                           
  2114                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 32:         RD3 = 0;
  2115  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2116  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2117  0420  1188               	bcf	8,3	;volatile
  2118  0421  0008               	return
  2119  0422                     __end_of_Lcd_Cmd:	
  2120                           
  2121                           	psect	text12
  2122  03F0                     __ptext12:	
  2123 ;; *************** function _Lcd_Port *****************
  2124 ;; Defined at:
  2125 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  a               1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  a               1    3[COMMON] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2139 ;;      Params:         0       0       0       0       0
  2140 ;;      Locals:         1       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0
  2142 ;;      Totals:         1       0       0       0       0
  2143 ;;Total ram usage:        1 bytes
  2144 ;; Hardware stack levels used:    1
  2145 ;; Hardware stack levels required when called:    1
  2146 ;; This function calls:
  2147 ;;		Nothing
  2148 ;; This function is called by:
  2149 ;;		_Lcd_Cmd
  2150 ;;		_Lcd_Init
  2151 ;;		_Lcd_Write_Char
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           
  2156                           ;psect for function _Lcd_Port
  2157  03F0                     _Lcd_Port:	
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _Lcd_Port: [wreg]
  2161                           ;Lcd_Port@a stored from wreg
  2162  03F0  00F3               	movwf	Lcd_Port@a
  2163                           
  2164                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 4: void Lcd_Port(char a);
      +                          C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 5: {;C:\Program Files (x86
      +                          )\Microchip\xc8\v2.05\pic\include\LCD.h: 6:  if(a & 1)
  2165  03F1  1C73               	btfss	Lcd_Port@a,0
  2166  03F2  2BF7               	goto	l61
  2167                           
  2168                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 7:   RD4 = 1;
  2169  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2170  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2171  03F5  1608               	bsf	8,4	;volatile
  2172  03F6  2BFA               	goto	l62
  2173  03F7                     l61:	
  2174                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 8:  else
  2175                           
  2176                           
  2177                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 9:   RD4 = 0;
  2178  03F7  1283               	bcf	3,5	;RP0=0, select bank0
  2179  03F8  1303               	bcf	3,6	;RP1=0, select bank0
  2180  03F9  1208               	bcf	8,4	;volatile
  2181  03FA                     l62:	
  2182                           
  2183                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 11:  if(a & 2)
  2184  03FA  1CF3               	btfss	Lcd_Port@a,1
  2185  03FB  2BFE               	goto	l63
  2186                           
  2187                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 12:   RD5 = 1;
  2188  03FC  1688               	bsf	8,5	;volatile
  2189  03FD  2BFF               	goto	l64
  2190  03FE                     l63:	
  2191                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 13:  else
  2192                           
  2193                           
  2194                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 14:   RD5 = 0;
  2195  03FE  1288               	bcf	8,5	;volatile
  2196  03FF                     l64:	
  2197                           
  2198                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 16:  if(a & 4)
  2199  03FF  1D73               	btfss	Lcd_Port@a,2
  2200  0400  2C03               	goto	l65
  2201                           
  2202                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 17:   RD6 = 1;
  2203  0401  1708               	bsf	8,6	;volatile
  2204  0402  2C04               	goto	l66
  2205  0403                     l65:	
  2206                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 18:  else
  2207                           
  2208                           
  2209                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 19:   RD6 = 0;
  2210  0403  1308               	bcf	8,6	;volatile
  2211  0404                     l66:	
  2212                           
  2213                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 21:  if(a & 8)
  2214  0404  1DF3               	btfss	Lcd_Port@a,3
  2215  0405  2C08               	goto	l67
  2216                           
  2217                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 22:   RD7 = 1;
  2218  0406  1788               	bsf	8,7	;volatile
  2219  0407  0008               	return
  2220  0408                     l67:	
  2221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 23:  else
  2222                           
  2223                           
  2224                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\include\LCD.h: 24:   RD7 = 0;
  2225  0408  1388               	bcf	8,7	;volatile
  2226  0409  0008               	return
  2227  040A                     __end_of_Lcd_Port:	
  2228                           
  2229                           	psect	text13
  2230  02F7                     __ptext13:	
  2231 ;; *************** function _TMR_Intt *****************
  2232 ;; Defined at:
  2233 ;;		line 34 in file "main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, status,2, status,0
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2247 ;;      Params:         0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0
  2249 ;;      Temps:          3       0       0       0       0
  2250 ;;      Totals:         3       0       0       0       0
  2251 ;;Total ram usage:        3 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		Interrupt level 1
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           
  2261                           ;psect for function _TMR_Intt
  2262  02F7                     _TMR_Intt:	
  2263                           
  2264                           ;main.c: 35:     GIE=0;
  2265  02F7  138B               	bcf	11,7	;volatile
  2266                           
  2267                           ;main.c: 36:     if (T0IF){
  2268  02F8  1D0B               	btfss	11,2	;volatile
  2269  02F9  2B29               	goto	i1l110
  2270                           
  2271                           ;main.c: 37:        counter++;
  2272  02FA  3001               	movlw	1
  2273  02FB  07F9               	addwf	_counter,f
  2274  02FC  1803               	skipnc
  2275  02FD  0AFA               	incf	_counter+1,f
  2276  02FE  3000               	movlw	0
  2277  02FF  07FA               	addwf	_counter+1,f
  2278                           
  2279                           ;main.c: 38:        if (counter==101) counter=0;
  2280  0300  3065               	movlw	101
  2281  0301  0679               	xorwf	_counter,w
  2282  0302  047A               	iorwf	_counter+1,w
  2283  0303  1D03               	btfss	3,2
  2284  0304  2B07               	goto	i1l1369
  2285  0305  01F9               	clrf	_counter
  2286  0306  01FA               	clrf	_counter+1
  2287  0307                     i1l1369:	
  2288                           
  2289                           ;main.c: 39:        if (counter < pwm_duty_cycle ){
  2290  0307  087A               	movf	_counter+1,w
  2291  0308  3A80               	xorlw	128
  2292  0309  00F0               	movwf	??_TMR_Intt
  2293  030A  1283               	bcf	3,5	;RP0=0, select bank0
  2294  030B  1303               	bcf	3,6	;RP1=0, select bank0
  2295  030C  085F               	movf	_pwm_duty_cycle+1,w
  2296  030D  3A80               	xorlw	128
  2297  030E  0270               	subwf	??_TMR_Intt,w
  2298  030F  1D03               	skipz
  2299  0310  2B13               	goto	u95_25
  2300  0311  085E               	movf	_pwm_duty_cycle,w
  2301  0312  0279               	subwf	_counter,w
  2302  0313                     u95_25:	
  2303  0313  1803               	skipnc
  2304  0314  2B18               	goto	i1l1373
  2305                           
  2306                           ;main.c: 40:         RC3=1;
  2307  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2308  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2309  0317  1587               	bsf	7,3	;volatile
  2310  0318                     i1l1373:	
  2311                           
  2312                           ;main.c: 42:        if (counter>pwm_duty_cycle){
  2313  0318  1283               	bcf	3,5	;RP0=0, select bank0
  2314  0319  1303               	bcf	3,6	;RP1=0, select bank0
  2315  031A  085F               	movf	_pwm_duty_cycle+1,w
  2316  031B  3A80               	xorlw	128
  2317  031C  00F0               	movwf	??_TMR_Intt
  2318  031D  087A               	movf	_counter+1,w
  2319  031E  3A80               	xorlw	128
  2320  031F  0270               	subwf	??_TMR_Intt,w
  2321  0320  1D03               	skipz
  2322  0321  2B24               	goto	u96_25
  2323  0322  0879               	movf	_counter,w
  2324  0323  025E               	subwf	_pwm_duty_cycle,w
  2325  0324                     u96_25:	
  2326  0324  1803               	skipnc
  2327  0325  2B29               	goto	i1l110
  2328                           
  2329                           ;main.c: 43:         RC3=0;
  2330  0326  1283               	bcf	3,5	;RP0=0, select bank0
  2331  0327  1303               	bcf	3,6	;RP1=0, select bank0
  2332  0328  1187               	bcf	7,3	;volatile
  2333  0329                     i1l110:	
  2334                           ;main.c: 45:     }
  2335                           
  2336                           
  2337                           ;main.c: 46:     GIE=1;
  2338  0329  178B               	bsf	11,7	;volatile
  2339                           
  2340                           ;main.c: 47:     T0IF=0;
  2341  032A  110B               	bcf	11,2	;volatile
  2342                           
  2343                           ;main.c: 48:     TMR0=0;
  2344  032B  1283               	bcf	3,5	;RP0=0, select bank0
  2345  032C  1303               	bcf	3,6	;RP1=0, select bank0
  2346  032D  0181               	clrf	1	;volatile
  2347  032E  0872               	movf	??_TMR_Intt+2,w
  2348  032F  008A               	movwf	10
  2349  0330  0E71               	swapf	(??_TMR_Intt+1)^(0+4294967168),w
  2350  0331  0083               	movwf	3
  2351  0332  0EFE               	swapf	126,f
  2352  0333  0E7E               	swapf	126,w
  2353  0334  0009               	retfie
  2354  0335                     __end_of_TMR_Intt:	
  2355  007E                     btemp	set	126	;btemp
  2356  007E                     wtemp0	set	126
  2357                           
  2358                           	psect	intentry
  2359  0004                     __pintentry:	
  2360                           ;incstack = 0
  2361                           ; Regs used in _TMR_Intt: [wreg+status,2+status,0]
  2362                           
  2363  0004                     interrupt_function:	
  2364  007E                     saved_w	set	btemp
  2365  0004  00FE               	movwf	btemp
  2366  0005  0E03               	swapf	3,w
  2367  0006  00F1               	movwf	??_TMR_Intt+1
  2368  0007  080A               	movf	10,w
  2369  0008  00F2               	movwf	??_TMR_Intt+2
  2370  0009  120A  118A  2AF7   	ljmp	_TMR_Intt


Data Sizes:
    Strings     30
    Constant    10
    Data        2
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     22      64
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 19
		 -> STR_2(CODE[11]), STR_1(CODE[19]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 40
		 -> dizi(BANK0[40]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 40
		 -> dizi(BANK0[40]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _TMR_Intt in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _TMR_Intt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR_Intt in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR_Intt in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR_Intt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3514
                                             21 BANK0      1     1      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _TMR0_Init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    2450
                                              8 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              8 COMMON     1     1      0
                                              3 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _TMR0_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     4      0     334
                                              8 COMMON     1     1      0
                                              0 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     532
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     110
                                              4 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _TMR_Intt                                             3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _TMR0_Init
   _sprintf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _isdigit

 _TMR_Intt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      40       5       80.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4B      12        0.0%
ABS                  0      0      4B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Nov 25 17:20:55 2022

                        pc 0002             ___bmul@product 0075                __CFG_CP$OFF 0000  
                       l61 03F7                         l62 03FA                         l63 03FE  
                       l64 03FF                         l65 0403                         l66 0404  
                       l67 0408                         fsr 0004                __CFG_LVP$ON 0000  
                      l236 00B3                        l238 008F                        _GIE 005F  
                      _RC0 0038                        _RC1 0039                        _RB4 0034  
                      _RC3 003B                        _RB5 0035                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        _PS0 0408  
                      _PS1 0409                        _PS2 040A               __CFG_CPD$OFF 0000  
                      u565 0346                        _PSA 040B                        u755 0277  
                      u775 029E                        fsr0 0004                        indf 0000  
             __CFG_FOSC$XT 0000                       l1233 0292                       l1163 0424  
                     l1157 043F                       l1167 042A                       l1505 004F  
                     l1259 03D3                       l1523 0091                       l1461 02D1  
                     l1517 005F                       l1471 02F2                       l1535 00CD  
                     l1519 008D                       l1615 01D4                       l1607 01B0  
                     l1545 00E4                       l1617 0197                       l1467 02E7  
                     l1459 02C3                       l1483 0374                       l1563 012D  
                     l1555 0107                       l1539 00D9                       l1619 01D6  
                     l1485 0382                       l1493 039B                       l1549 00E6  
                     l1575 013E                       l1489 0390                       l1577 002F  
                     l1579 0177                       l1659 00A5                       l1599 0193  
                     STR_1 03B0                       STR_2 03C3                       _T0IE 005D  
                     _T0IF 005A                       _T0CS 040D                       u1115 0377  
                     u1045 02C6                       u1135 0388                       u1065 02D2  
                     u1145 0391                       u1075 02DE                       u1235 00FD  
                     u1315 01A6                       u1085 02E8                       u1255 0113  
                     u1335 01BD                       u1265 0125                       u1345 01CA  
                     u1367 0219                       u1377 0226                       u1387 0235  
                     u1397 0419                       _PEIE 005E                       _RBIF 0058  
                     _TMR0 0001               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _dizi 0020                       _main 017C                       btemp 007E  
            __CFG_BOREN$ON 0000                       start 000C         ??_Lcd_Write_String 0078  
          __end_of_Lcd_Cmd 0422          ___bmul@multiplier 0076             _pwm_duty_cycle 005E  
                    ?_main 0070              __CFG_WDTE$OFF 0000            __end_of___lwdiv 02F7  
                    i1l110 0329            __end_of___lwmod 03A0                      _PORTC 0007  
                    _PORTD 0008    __size_of_Lcd_Set_Cursor 0050                      _TRISC 0087  
                    _TRISD 0088                      u95_25 0313                      u96_25 0324  
       __size_of_TMR0_Init 000B            __end_of_dpowers 03B0            __end_of_isdigit 0441  
                    pclath 000A           __end_of_TMR_Intt 0335                      status 0003  
                    wtemp0 007E            __end_of_sprintf 017C           __end_of_Lcd_Init 0269  
         __end_of_Lcd_Port 040A            __initialization 000F               __end_of_main 020F  
                   ??_main 005D                     i1l1373 0318                     i1l1369 0307  
                ??_Lcd_Cmd 0074    __size_of_Lcd_Write_Char 0037             __CFG_PWRTE$OFF 0000  
                   ___bmul 0422          __end_of_TMR0_Init 044C                  ??___lwdiv 0077  
                ??___lwmod 0078                  ??_isdigit 0073                     saved_w 007E  
                ??_sprintf 0053            Lcd_Set_Cursor@a 0048            Lcd_Set_Cursor@b 0076  
          Lcd_Set_Cursor@y 004A            Lcd_Set_Cursor@z 0049    __end_of__initialization 0024  
      ___bmul@multiplicand 0073             __pcstackCOMMON 0070               __pidataBANK0 0454  
                ?_TMR_Intt 0070             _Lcd_Set_Cursor 0269                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070                 __pbssBANK0 0020                 __pmaintext 017C  
                  ?___bmul 0073                 __pintentry 0004  __size_of_Lcd_Write_String 0022  
   __end_of_Lcd_Set_Cursor 02B9                 ??_TMR_Intt 0070                 ??_Lcd_Init 0076  
               ??_Lcd_Port 0073                 __stringtab 03A0             _Lcd_Write_Char 0335  
                  _Lcd_Cmd 040A            __size_of___bmul 0011                    ___lwdiv 02B9  
                  ___lwmod 036C            ?_Lcd_Set_Cursor 0076                    __ptext1 0028  
                  __ptext2 0433                    __ptext3 036C                    __ptext4 02B9  
                  __ptext5 0422                    __ptext6 0441                    __ptext7 03CE  
                  __ptext8 0335                    __ptext9 0269                    _counter 0079  
                  _dpowers 03A6                    _isdigit 0433                    _sprintf 0028  
                  clrloop0 044D     __end_of_Lcd_Write_Char 036C       end_of_initialization 0024  
                Lcd_Port@a 0073                  _TMR0_Init 0441                  _TRISBbits 0086  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 004A          Lcd_Write_String@i 0048  
           __end_of___bmul 0433           _Lcd_Write_String 03CE                 ?_TMR0_Init 0070  
      start_initialization 000F          __size_of_TMR_Intt 003E          __size_of_Lcd_Init 005A  
        __size_of_Lcd_Port 001A                   ??___bmul 0074                __pdataBANK0 005E  
          Lcd_Write_Char@a 0077            Lcd_Write_Char@y 0076                __pbssCOMMON 0079  
                ___latbits 0002              __pcstackBANK0 0048                   ?_Lcd_Cmd 0070  
              sprintf@flag 0057                sprintf@prec 005B           ___lwdiv@dividend 0075  
         ??_Lcd_Set_Cursor 0077                   ?___lwdiv 0073                   ?___lwmod 004B  
              ??_TMR0_Init 0073                  __pstrings 03A0                   ?_isdigit 0070  
         ___lwdiv@quotient 0049                   ?_sprintf 0050          interrupt_function 0004  
                clear_ram0 044C                   Lcd_Cmd@a 0075                __stringbase 03A5  
                 _TMR_Intt 02F7           ??_Lcd_Write_Char 0074                   _Lcd_Init 020F  
                 _Lcd_Port 03F0   __end_of_Lcd_Write_String 03F0           __size_of_Lcd_Cmd 0018  
         __size_of___lwdiv 003E           __size_of___lwmod 0034         __end_of__stringtab 03A6  
              _isdigit$602 0073                 sprintf@val 0059           __size_of_isdigit 000E  
          ___lwdiv@divisor 0073            ___lwdiv@counter 0048                   __ptext10 020F  
                 __ptext11 040A                   __ptext12 03F0                   __ptext13 02F7  
         __size_of_sprintf 0154              __size_of_main 0093                   isdigit@c 0074  
       Lcd_Write_Char@temp 0075                   intlevel1 0000                  sprintf@ap 0056  
                sprintf@sp 0058           ___lwmod@dividend 004D                  stringcode 03A0  
       Lcd_Set_Cursor@temp 004B                   sprintf@c 005C                   sprintf@f 0050  
          ___lwmod@divisor 004B            ___lwmod@counter 004F                   stringdir 03A0  
                 stringtab 03A0  
